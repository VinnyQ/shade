#!/usr/bin/env python
# The MIT License (MIT)
#
# Copyright (c) 2014 Richard Hawkins
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import argparse
import os

from sdl2 import keycode

from transylvania.actor import Actor
from transylvania import Application
from transylvania.display import DisplayManager
from transylvania.lights import PointLight
from transylvania.sprite import SpriteManager


class SpriteTool(Application):
    """
    Tool for viewing sprite animations.
    """

    def handle_keydown(self, key):
        if key == keycode.SDLK_UP:
            # change animation
            return
        if key == keycode.SDLK_DOWN:
            # change animation
            return
        if key == keycode.SDLK_LEFT:
            # change sprite
            return
        if key == keycode.SDLK_RIGHT:
            # change sprite
            return
        if key == keycode.SDLK_b:
            self.current_background_color = self.current_background_color + 1
            if self.current_background_color > len(self.colors) - 1:
                self.current_background_color = 0
            color = self.colors[self.current_background_color]
            self.display.set_clear_color(
                color['r'], color['g'], color['b'])
        if key == keycode.SDLK_l:
            self.current_light_color = self.current_light_color + 1
            if self.current_light_color > len(self.colors) - 1:
                self.current_light_color = 0
            color = self.colors[self.current_light_color]
            light = self.lights[0]
            light.r = color['r']
            light.g = color['g']
            light.b = color['b']
        if key == keycode.SDLK_p:
            self.current_light_power = self.current_light_power + 1
            if self.current_light_power > len(self.light_powers) - 1:
                self.current_light_power = 0
            light = self.lights[0]
            light.i = self.light_powers[self.current_light_power]

    def handle_mousebuttondown(self, button):
        print button

    def handle_mousemotion(self, motion):
        light = self.lights[0]
        light.x = motion.x
        light.y = self.display.height - motion.y - 1

    def __init__(self, config=None, display=None, sprite_manager=None,
                 sprite_name=None):
        super(SpriteTool, self).__init__(config=config, display=display,
                                         sprite_manager=sprite_manager)
        self.sprite_name = sprite_name
        self.colors = [
            {'r': 0.5, 'g': 0.5, 'b': 0.5},
            {'r': 0.5, 'g': 0.0, 'b': 0.0},
            {'r': 0.0, 'g': 0.5, 'b': 0.5},
            {'r': 1.0, 'g': 0.0, 'b': 0.0},
            {'r': 0.0, 'g': 1.0, 'b': 0.0},
            {'r': 0.0, 'g': 0.0, 'b': 1.0},
            {'r': 1.0, 'g': 1.0, 'b': 1.0},
            {'r': 0.0, 'g': 0.0, 'b': 0.0}]
        self.light_powers = [0, 10, 100, 1000, 10000, 100000]
        self.current_background_color = 0
        self.current_light_color = 0
        self.current_light_power = 3

    def run(self):
        sprite = self.sprite_manager.get_sprite(self.sprite_name)
        sprite_width = sprite.data['frame']['size']['width']
        sprite_height = sprite.data['frame']['size']['height']

        sprite_x = self.display.width / 2 - sprite_width / 2
        sprite_y = self.display.height / 2 - sprite_height / 2
        self.add_object(Actor(sprite, x=sprite_x, y=sprite_y, layer=0))

        self.add_light(PointLight(z=10, i=1000))

        super(SpriteTool, self).run()


def start_app():
    parser = argparse.ArgumentParser(description='Sprite Tool.')
    parser.add_argument('sprite',
                        help='path to sprite dir')
    args = parser.parse_args()

    sprite_dir = args.sprite
    sprite_dir = sprite_dir.strip('/')
    sprite_dir, sprite_name = sprite_dir.rsplit('/', 1)
    sprite_dir = '{0}/{1}'.format(os.getcwd(), sprite_dir)

    config = {}
    display = DisplayManager(width=800, height=600)

    sprite_manager = SpriteManager(sprite_dir)
    sprite_manager.load(sprite_name)

    app = SpriteTool(config=config, display=display,
                     sprite_manager=sprite_manager, sprite_name=sprite_name)
    app.run()


if __name__ == '__main__':
    start_app()
